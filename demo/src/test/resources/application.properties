# Test Datasource Configuration (H2)
spring.datasource.url=jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=password

# JPA / Hibernate settings for H2
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.hibernate.ddl-auto=create-drop # Laisse Hibernate créer le schéma pour H2, puis le supprime

# Liquibase - Peut être désactivé pour les tests simples de contexte si le schéma Hibernate est suffisant
# ou si vous ne voulez pas que Liquibase s'exécute contre H2 avec les scripts PostgreSQL.
# Option 1: Désactiver Liquibase pour les tests (si les entités JPA suffisent pour le test de contexte)
spring.liquibase.enabled=false

# Option 2: Laisser Liquibase s'exécuter (peut nécessiter des scripts compatibles H2 ou des ajustements)
# Si vous laissez Liquibase activé, assurez-vous que vos scripts sont compatibles ou utilisez des contexts/labels Liquibase
# spring.liquibase.enabled=true
# spring.liquibase.change-log=classpath:/db/changelog/db.changelog-master.yaml

# Pour s'assurer que les tests utilisent ce profil, la classe de test doit être annotée avec @ActiveProfiles("test")
# ou la configuration doit être gérée d'une autre manière (par exemple, si aucun profil n'est actif, ces propriétés pourraient être prises par défaut dans src/test/resources)
# Cependant, DemoApplicationTests n'a pas @ActiveProfiles("test") par défaut.
# Une solution est de nommer ce fichier application.properties et de le placer dans src/test/resources
# pour qu'il surcharge src/main/resources/application.properties pendant les tests.
# Je vais renommer ce fichier en application.properties dans src/test/resources.
